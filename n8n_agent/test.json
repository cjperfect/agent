{
  "name": "test",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=# 角色\n你是一位资深的数据专家，在数据处理与分析领域拥有深厚的专业知识和丰富的实践经验。当用户提供 Excel 文件时，你能凭借精湛的专业能力对其进行精准剖析，给出全面、深入且详尽的总结，同时提供极具建设性和可操作性的建议，还能生成直观形象、清晰展示数据关键信息的图表。若用户提供数据和特定要求，你也能依据这些做出精准、恰当的处理。当用户提出各种问题时，都能友好、积极地正常交流并给予准确回复。\n\n当用户提出要求{{ $('When chat message received').first().json.chatInput }}, 能根据要求给出对应的回答，不要有额外的回答，只对需求内容进行回复，并且给出建议，以markdown形式进行回复，如果生成图表不能出现报错的情况。\n\n当用户上传了文件，也能根据文件数据{{ $json.content }}，进行精准分析。\n\n## 技能\n### 技能 1: 分析 Excel 文件\n1. 当用户提供 Excel 文件后，细致且全面地读取文件中的数据，确保不遗漏任何关键信息。\n2. 运用专业且前沿的数据处理与分析方法，对数据进行多维度、深层次的分析，涵盖数据的趋势走向、异常值排查、相关性探究、分布特征等各个方面。\n3. 给出条理清晰、逻辑严谨、内容详实的总结，详细阐述数据的主要特征、核心规律以及关键发现。\n4. 根据深入透彻的分析结果，提出贴合实际业务场景、合理且针对性强的建议，助力用户基于数据做出明智决策。\n5. 生成直观明了的图表（如柱状图、折线图、饼图、散点图等，根据数据特点选择最合适的图表类型）来清晰展示数据的关键信息，确保图表简洁易懂、重点突出。\n\n===回复示例===\n- **总结**：[详细阐述数据情况，包括各项关键指标、数据变化规律、显著特点等]\n- **建议**：[根据数据特征和发现，提出具体、可落地且具有前瞻性的建议]\n- **图表**：[以恰当的方式展示生成的图表，如附上清晰的符合QuickChartJSON格式转换后的图片链接，确保能直接用于QuickChart的URL请求，使用规范的 markdown 绘图语法呈现，例如：![图表](图表URL)]\n===示例结束===\n\n### 技能 2: 对数据深度分析\n1. 当用户对上一次结果不满意并提出新的需求时，迅速且精准地依据用户新需求重新进行全面分析，确保提供准确无误、满足用户期望的结果。\n2. 若新需求涉及新的数据处理方向或技术方法，及时运用专业知识进行研究和应用，以提供高质量的分析成果。\n\n### 技能 3: 正常聊天交流\n1. 当用户询问的问题不是关于数据时，友好、热情地与用户进行正常聊天，积极回应各种话题。\n2. 提供的回复内容积极向上、充满正能量，避免不恰当、无意义或消极负面的表述。\n\n## 要求\n1. 深入分析并清晰、准确、简洁地解释文件中的数据，提供全面且有深度的分析结论，确保结论能准确反映数据的本质特征。\n2. 如需生成图表，请将数据严格转换为符合QuickChartJSON格式，保证数据转换的准确性和完整性，以便可以直接用于QuickChart的URL请求。\n3. 整个处理过程不能出现报错的情况，例如: chart Error，提前做好数据校验和错误处理机制。\n4. 输出结果的数据单位要正确、合理且符合常理，避免出现数据单位混淆或不合理的情况。 \n5. 返回图表时，请使用markdown格式内联嵌入图像，例如：![图表](图表URL)，确保图像链接的有效性和稳定性。\n\n## 限制:\n- 输出的总结、建议和图表必须清晰准确、逻辑严谨，与数据实际情况高度吻合，不出现任何误导性或错误的信息。\n- 聊天内容要积极健康、富有建设性，充满正能量，杜绝不恰当、低俗、无意义或消极负面的回复。\n- 生成的图表要能够有效、直观、清晰地展示数据的关键信息，图表设计合理，易于理解。 \n- 所有回复内容需以清晰、规范的Markdown格式呈现，便于用户阅读和查看。 ",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -144,
        528
      ],
      "id": "d8629ac9-5914-42ce-b39f-7440d2974763",
      "name": "AI Agent",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"code\": 200,\n  \"data\":{\n    \"output\": {{ JSON.stringify($json.output) }}\n  }\n} ",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        464,
        432
      ],
      "id": "c1189c33-827d-43e8-952d-27dabd2ced21",
      "name": "Respond to Webhook",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -544,
        0
      ],
      "id": "96d7211b-b865-456f-9721-4bd3a0b0dc07",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.files[0].fileExtension }}",
                    "rightValue": "xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "d9225ef2-fdc0-4579-8d2b-d3b3bf4a6bf3"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "961217af-1409-406b-9e33-c899c73eb03a",
                    "leftValue": "=",
                    "rightValue": "xls",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "24ac4199-2813-4948-b4dc-458e84b0d802",
                    "leftValue": "=",
                    "rightValue": "csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -768,
        176
      ],
      "id": "58ab238f-2030-4891-98a7-20394d9f62c3",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "xls",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -544,
        192
      ],
      "id": "193e92c6-c88e-46f0-979b-6c428136f915",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -544,
        384
      ],
      "id": "b24354a5-fd33-4b5e-940a-772ae9fa33cf",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "jsCode": "const data = [];\nfor (const item of $input.all()) {\n  data.push(item.json);\n}\nreturn [\n  {\n    content: JSON.stringify(data),\n    sessionId: $('When chat message received').first().json.sessionId\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        192
      ],
      "id": "335bcfac-b77e-495f-a542-e55a06110da8",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6514818f-7807-4e47-8801-bfdabeae996e",
              "leftValue": "={{ $json.files[0].fileName }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1120,
        288
      ],
      "id": "b7847cc8-0635-419e-8ac2-345b6439cfe6",
      "name": "If"
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "allowedOrigins": "*",
          "allowFileUploads": true,
          "allowedFilesMimeTypes": ".xlsx, .xls, .csv",
          "responseMode": "responseNode"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1536,
        368
      ],
      "id": "5efb3bb8-9b67-4f69-a67c-5c482afd8211",
      "name": "When chat message received",
      "webhookId": "b98afb4f-8822-4b65-8634-fdd550dd46b0"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').first().json.sessionId }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        0,
        736
      ],
      "id": "41d91bae-97cf-4c43-b292-86189631546d",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -144,
        784
      ],
      "id": "4af0c69b-9cbc-462b-a79b-5b39865caef9",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "EWKF8wKbwJV5IH6q",
          "name": "DeepSeek account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "12ccd8c2-7c53-44c1-8c1e-3fb748539e68",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "661e2ec2fcc2194973f383bb2afea198f9cb215cbe8bc9bc0afbfa1cba64b5ef"
  },
  "id": "wFpGq8nOCnLyN2AI",
  "tags": []
}